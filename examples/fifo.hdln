comp multiplex {
  in {
    adr;
    val: [2];
  }
  out {
    out;
  }
  impl {
    out = (adr and val[1]) or (not adr and val[0]);
  }
}
    

comp CELL {
  in {
    write_en;
    write_data;
  }
  out {
    read_data;
  }
  trigger {
    clock;
  }
  impl {
    sync(clock) inner_data_store = alloc multiplex {
      adr = write_en;
      val = [^inner_data_store,  write_data];
    }.out;
    sync(clock) inner_data_prep = ^inner_data_store;
    read_data = ^inner_data_prep; //If value is overridden then read the previous value
}
  

comp FIFO {
  in {
    pull_en;
    push_en;
    push_data;
  }
  out {
    pull_data;
    full;
    empty;
  }
  trigger {
    clock;
  }
  impl {
    pull_data = alloc CELL {
      write_en = override;
      write_data = push_data;
      clock = clock;
    }.read_data;
    sync(clock) has_data = push_en or (^has_data and not pull_en);
    full = ^has_data and push_en and not pull_en;
    empty = not ^has_data and pull_en and not push_en;
    override = (not ^has_data and push_en) or (^has_data and push_en and pull_en);
}
    
